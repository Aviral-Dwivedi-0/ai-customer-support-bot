╔═══════════════════════════════════════════════════════════════════════════╗
║                                                                           ║
║              🚀 VERCEL DEPLOYMENT - QUICK START GUIDE 🚀                 ║
║                                                                           ║
╚═══════════════════════════════════════════════════════════════════════════╝

┌───────────────────────────────────────────────────────────────────────────┐
│                        PREPARATION (DONE ✅)                              │
└───────────────────────────────────────────────────────────────────────────┘

✅ Files Created for Deployment:
   - backend/vercel.json (Vercel config)
   - backend/index.py (Serverless entry point)
   - VERCEL_DEPLOYMENT_GUIDE.md (Detailed guide)

✅ Your Code is on GitHub:
   https://github.com/Aviral-Dwivedi-0/ai-customer-support-bot

┌───────────────────────────────────────────────────────────────────────────┐
│                        STEP 1: SIGN UP FOR VERCEL                        │
└───────────────────────────────────────────────────────────────────────────┘

1. Go to: https://vercel.com
2. Click "Sign Up"
3. Choose "Continue with GitHub"
4. Authorize Vercel to access your GitHub account

┌───────────────────────────────────────────────────────────────────────────┐
│                    STEP 2: DEPLOY BACKEND (API)                           │
└───────────────────────────────────────────────────────────────────────────┘

1. Click "Add New..." → "Project"

2. Import your repository:
   - Select: ai-customer-support-bot
   - Click "Import"

3. Configure Backend:
   ┌─────────────────────────────────────────────────────────────┐
   │ Project Name:        ai-support-backend                     │
   │ Framework Preset:    Other                                  │
   │ Root Directory:      backend  ← IMPORTANT!                  │
   │ Build Command:       (leave empty)                          │
   │ Output Directory:    (leave empty)                          │
   │ Install Command:     pip install -r requirements.txt        │
   └─────────────────────────────────────────────────────────────┘

4. Add Environment Variables:
   Click "Environment Variables" → Add:
   
   ┌─────────────────────────────────────────────────────────────┐
   │ Key: GEMINI_API_KEY                                         │
   │ Value: your-actual-gemini-api-key-here                      │
   │                                                             │
   │ Key: FLASK_ENV                                              │
   │ Value: production                                           │
   └─────────────────────────────────────────────────────────────┘

5. Click "Deploy" and wait (2-3 minutes)

6. Copy your backend URL:
   Example: https://ai-support-backend.vercel.app
   
   ⚠️ SAVE THIS URL - YOU'LL NEED IT FOR FRONTEND!

┌───────────────────────────────────────────────────────────────────────────┐
│                    STEP 3: UPDATE FRONTEND CODE                           │
└───────────────────────────────────────────────────────────────────────────┘

Before deploying frontend, update the API URL:

1. Open: frontend/src/App.js

2. Find line ~12-15:
   const API_URL = 'http://localhost:5000';

3. Replace with:
   const API_URL = process.env.REACT_APP_API_URL || 'https://your-backend.vercel.app';
   
   ⚠️ Replace 'your-backend.vercel.app' with YOUR actual backend URL!

4. Save the file

5. Commit and push:
   git add frontend/src/App.js
   git commit -m "Update API URL for Vercel deployment"
   git push origin main

┌───────────────────────────────────────────────────────────────────────────┐
│                    STEP 4: DEPLOY FRONTEND                                │
└───────────────────────────────────────────────────────────────────────────┘

1. Go back to Vercel Dashboard
   Click "Add New..." → "Project"

2. Import same repository again:
   - Select: ai-customer-support-bot
   - Click "Import"

3. Configure Frontend:
   ┌─────────────────────────────────────────────────────────────┐
   │ Project Name:        ai-support-frontend                    │
   │ Framework Preset:    Create React App                       │
   │ Root Directory:      frontend  ← IMPORTANT!                 │
   │ Build Command:       npm run build                          │
   │ Output Directory:    build                                  │
   │ Install Command:     npm install                            │
   └─────────────────────────────────────────────────────────────┘

4. Add Environment Variable:
   Click "Environment Variables" → Add:
   
   ┌─────────────────────────────────────────────────────────────┐
   │ Key: REACT_APP_API_URL                                      │
   │ Value: https://your-backend.vercel.app                      │
   │        ↑ Use YOUR actual backend URL from Step 2!           │
   └─────────────────────────────────────────────────────────────┘

5. Click "Deploy" and wait (2-3 minutes)

6. You'll get your frontend URL:
   Example: https://ai-support-frontend.vercel.app

┌───────────────────────────────────────────────────────────────────────────┐
│                    STEP 5: UPDATE CORS SETTINGS                           │
└───────────────────────────────────────────────────────────────────────────┘

After frontend is deployed, update backend CORS:

1. Open: backend/app/main.py

2. Find the CORS configuration (around line 40-50)

3. Update origins list to include your frontend URL:

   CORS(app, resources={
       r"/api/*": {
           "origins": [
               "http://localhost:3000",
               "https://ai-support-frontend.vercel.app",  ← Add this
               "https://*.vercel.app"
           ],
           ...
       }
   })

4. Commit and push:
   git add backend/app/main.py
   git commit -m "Update CORS for Vercel frontend"
   git push origin main

5. Vercel will auto-deploy your backend again

┌───────────────────────────────────────────────────────────────────────────┐
│                    STEP 6: TEST YOUR DEPLOYMENT                           │
└───────────────────────────────────────────────────────────────────────────┘

1. Open your frontend URL in browser:
   https://your-frontend.vercel.app

2. Try chatting:
   - "What payment methods do you accept?"
   - "How do I return a product?"
   - "Do you offer free shipping?"

3. If it works → 🎉 SUCCESS!

4. If not, check:
   - Backend URL is correct in frontend env variable
   - CORS is configured properly
   - Environment variables are set
   - Check Vercel logs for errors

┌───────────────────────────────────────────────────────────────────────────┐
│                        TROUBLESHOOTING                                    │
└───────────────────────────────────────────────────────────────────────────┘

❌ "Network Error" in frontend:
   → Check REACT_APP_API_URL is set correctly
   → Verify backend is deployed and accessible
   → Test backend directly: curl https://your-backend.vercel.app

❌ "CORS Error":
   → Update CORS origins in backend/app/main.py
   → Include your frontend Vercel URL
   → Push changes to redeploy

❌ "500 Internal Server Error":
   → Check Vercel backend logs
   → Verify GEMINI_API_KEY is set
   → Check all dependencies in requirements.txt

❌ Frontend not loading:
   → Check build logs in Vercel
   → Verify all dependencies installed
   → Check for console errors

┌───────────────────────────────────────────────────────────────────────────┐
│                        YOUR DEPLOYMENT URLS                               │
└───────────────────────────────────────────────────────────────────────────┘

After deployment, you'll have:

Backend API:  https://ai-support-backend.vercel.app
Frontend:     https://ai-support-frontend.vercel.app

You can also set custom domains in Vercel dashboard!

┌───────────────────────────────────────────────────────────────────────────┐
│                        IMPORTANT NOTES                                    │
└───────────────────────────────────────────────────────────────────────────┘

⚠️  Database Limitation:
    SQLite works on Vercel but data is NOT persistent (resets on each deploy)
    For production, consider:
    - Vercel Postgres
    - MongoDB Atlas
    - Supabase
    - PlanetScale

💡 Auto-Deployments:
    Every push to GitHub main branch will trigger automatic redeployment!

🔒 API Keys:
    Never commit API keys to Git
    Always use environment variables in Vercel

📊 Monitoring:
    Check Vercel Dashboard for:
    - Deployment logs
    - Function logs
    - Analytics
    - Usage metrics

┌───────────────────────────────────────────────────────────────────────────┐
│                        NEXT STEPS                                         │
└───────────────────────────────────────────────────────────────────────────┘

After successful deployment:

1. ✅ Test all FAQ categories thoroughly
2. ✅ Monitor Vercel analytics
3. ✅ Add custom domain (optional)
4. ✅ Update GitHub README with live demo link
5. ✅ Share your live chatbot!

┌───────────────────────────────────────────────────────────────────────────┐
│                        QUICK REFERENCE                                    │
└───────────────────────────────────────────────────────────────────────────┘

Vercel Dashboard:  https://vercel.com/dashboard
Deployment Docs:   See VERCEL_DEPLOYMENT_GUIDE.md (detailed)
Your GitHub:       https://github.com/Aviral-Dwivedi-0/ai-customer-support-bot

Support:
- Vercel Docs: https://vercel.com/docs
- Vercel Support: https://vercel.com/support

╔═══════════════════════════════════════════════════════════════════════════╗
║                                                                           ║
║                    🎉 READY TO DEPLOY! 🎉                                 ║
║                                                                           ║
║              Follow the steps above to deploy your                        ║
║              AI Customer Support Bot to Vercel!                           ║
║                                                                           ║
╚═══════════════════════════════════════════════════════════════════════════╝
